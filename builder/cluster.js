const commands = ['new', 'list', 'describe', 'scripts', 'delete', 'update', 'script', 'edit', 'provisioning-file'];
const _ = require ('lodash');
module.exports = function (yargs, handler){
    yargs.command('cluster', 'Cluster settings', 
     (yargs) => {
        yargs.command ('new',  'create new cluster', {
            name: {
                alias: 'n',
                desc: 'Cluster name',
                demandOption: true,
                type: 'string'
            },
            'open-register': {
                alias: 'or',
                desc: 'Sets if the cluster allows products to register when they first connect. If set to false, all products have to be manually provisioned.',
                demandOption: false,
                type: 'boolean',
                default: true
            },
            platform: {
                alias: 'p',
                desc: 'The platform the products in the cluster are running.',
                choices: ['x86', 'arm'],
                demandOption: true,
                type: 'string'
            },
            deployer: {
                alias: 'd',
                desc: 'The minimum version of the deployer software that runs on the cluster\'s products.',
                demandOption: true,
                type: 'number'
            },
            'public-key':  {
                alias: 'k-pub',
                desc: 'A PEM formatted public RSA key, used to register products. If not specified, a key pair will be generated by the server for the cluster.',
                demandOption: false,
                type: 'string'
            },
            'private-key':  {
                alias: 'k-prv',
                desc: 'A PEM formatted private RSA key, used to register products. If not specified, a key pair will be generated by the server for the cluster.',
                demandOption: false,
                type: 'string'
            },
            'filter-register': {
                desc: 'If the cluster has open registration, specifies if the cluster should filter by productId the products it allows to register when they first connect. If set to true, register-products must contain the list of allowed productIds.',
                demandOption: false,
                type: 'boolean',
                default: false
            },
            'register-products': {
                desc: 'The list of productIds of products that are allowed to register if open-register and filter-register are set to true.',
                demandOption: false,
                type: 'array'
            }
        }, handler.new)
        .command ('list', 'list all user\'s clusters', {}, handler.list)
        .command ('describe <cluster_id>', 'show cluster information', {}, handler.get)
        .command ('scripts <cluster_id>', 'show cluster scripts', {}, handler.getScripts)
        .command ('delete <cluster_id>', 'deletes the cluster', {}, handler.delete)
        .command ('edit <cluster_id>', 'edit the cluster', {
            name: {
                alias: 'n',
                desc: 'Cluster name',
                type: 'string'
            },
            deployer: {
                alias: 'd',
                desc: 'The minimum version of the deployer software that runs on the cluster\'s products.',
                type: 'number'
            },
            'open-register': {
                alias: 'or',
                desc: 'Sets if the cluster allows products to register when they first connect. If set to false, all products have to be manually provisioned.',
                type: 'boolean',
                default: true
            },
            'filter-register': {
                desc: 'If the cluster has open registration, specifies if the cluster should filter by productId the products it allows to register when they first connect. If set to true, register-products must contain the list of allowed productIds.',
                type: 'boolean',
                default: false
            },
            'register-products': {
                desc: 'The list of productIds of products that are allowed to register if open-register and filter-register are set to true.',
                type: 'array'
            },
            'update-hours': {
                desc: 'Perform updates only between specified hours. If set to true, need to specify update-from and update-to',
                type: 'boolean',
                default: false
            },
            'update-from': {
                desc: 'Start performing updates from this hour. update-hours needs to be set to true.',
                type: 'number'
            },
            'update-to': {
                desc: 'Start performing updates until this hour. update-hours needs to be set to true.',
                type: 'number'
            },
            'update-interval': {
                desc: 'Perform update requests (and updates if needed) at this hours interval.',
                type: 'number'
           }
        }, handler.edit)
        .command ('script', 'adds or removes a script',
        (yargs) =>  {
            yargs.command ('add', 'adds a new script',{
                name: {
                    alias: 'n',
                    desc: 'Script name',
                    type: 'string',
                    demandOption: true
                },
                command: {
                    alias: 'c',
                    desc: 'Command chain',
                    type: 'string',
                    demandOption: true
                },
                'cluster-id': {
                    alias: 'cluster',
                    desc: 'The clusterId',
                    type: 'string',
                    demandOption: true
                }
            }, handler.addScript)
            .command ('remove', 'removes the script from the cluster', {
                name: {
                    alias: 'n',
                    desc: 'Script name',
                    type: 'string',
                    demandOption: true
                },
    
                'cluster-id': {
                    alias: 'cluster',
                    desc: 'The clusterId',
                    type: 'string',
                    demandOption: true
                }
            }, handler.deleteScript)
            .check ((argv)=>{
                if (argv._[2] === 'add' || argv._[2] === 'remove')
                return true;
            throw new Error ('Invalid command.');
            })
            .help ()
            .demandCommand ();
        })
        .command ('provisioning-file <cluster-id>', 'get cluster\'s provisioning file' , {}, handler.getJson)
        .check ((argv)=>{
            if (_.indexOf (commands, argv._[1]) != -1)
                return true;
            throw new Error ('Invalid command.');
        })
       .help ()
       .demandCommand ();
     })
    return yargs;
};
